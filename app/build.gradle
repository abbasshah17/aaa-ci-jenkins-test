apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compile_sdk_version
    buildToolsVersion rootProject.ext.build_tools_version

    defaultConfig {
        applicationId "com.example.jenkins_ci_test"

        minSdkVersion rootProject.ext.minimum_sdk
        targetSdkVersion rootProject.ext.target_sdk

        versionCode 100000
        versionName "1.0.0.0.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        // Changes the directory where Gradle saves test reports. By default, Gradle saves test reports
        // in the path_to_your_project/module_name/build/outputs/reports/ directory.
        // '$rootDir' sets the path relative to the root directory of the current project.
        reportDir "$rootDir/test-reports"
        // Changes the directory where Gradle saves test results. By default, Gradle saves test results
        // in the path_to_your_project/module_name/build/outputs/test-results/ directory.
        // '$rootDir' sets the path relative to the root directory of the current project.
        resultsDir "$rootDir/test-results"

        unitTests {
            // By default, local unit tests throw an exception any time the code you are testing tries to access
            // Android platform APIs (unless you mock Android dependencies yourself or with a testing
            // framework like Mockito). However, you can enable the following property so that the test
            // returns either null or zero when accessing platform APIs, rather than throwing an exception.
            returnDefaultValues true

            // Encapsulates options for controlling how Gradle executes local unit tests. For a list
            // of all the options you can specify, read Gradle's reference documentation.
            all {
                // Sets JVM argument(s) for the test JVM(s).
                jvmArgs '-XX:MaxPermSize=256m'

                // You can also check the task name to apply options to only the tests you specify.
                if (it.name == 'testDebugUnitTest') {
                    systemProperty 'debug', 'true'
                }
            }
        }

    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.appcompat:appcompat:${rootProject.ext.app_compat}"
    implementation "androidx.constraintlayout:constraintlayout:${rootProject.ext.constraint_layout}"

    implementation "com.google.android.material:material:${rootProject.ext.material}"

    implementation "androidx.lifecycle:lifecycle-extensions:${rootProject.ext.life_cycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel:${rootProject.ext.life_cycle}"

    implementation "com.squareup.okhttp3:logging-interceptor:${rootProject.ext.okhttpVersion}"

    // Dagger Dependency Injection
    implementation "com.google.dagger:dagger:${rootProject.ext.dagger}"
    annotationProcessor "com.google.dagger:dagger-compiler:${rootProject.ext.dagger}"

    implementation "com.squareup.retrofit2:retrofit:${rootProject.ext.retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${rootProject.ext.retrofitVersion}"

    testImplementation "junit:junit:${rootProject.ext.junit}"
    testImplementation "org.mockito:mockito-core:${rootProject.ext.mockito}"
    androidTestImplementation "androidx.test.ext:junit:${rootProject.ext.androidx_runner}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.ext.androidx_espresso}"
}
